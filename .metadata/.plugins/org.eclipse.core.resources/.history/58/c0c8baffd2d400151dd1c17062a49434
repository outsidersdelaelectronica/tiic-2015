/*
 * afe_serial.c
 *
 *  Created on: 29/9/2015
 *      Author: Smau
 */

#include "afe_serial.h"

//const uint8_t sin[1500] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x19, 0x00, 0x00, 0x26, 0x00, 0x00, 0x32, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x4B, 0x00, 0x00,
//		0x58, 0x00, 0x00, 0x64, 0x00, 0x00, 0x71, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x96, 0x00, 0x00, 0xA3, 0x00, 0x00, 0xAF, 0x00, 0x00, 0xBB, 0x00,
//		0x00, 0xC8, 0x00, 0x00, 0xD4, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xEC, 0x00, 0x00, 0xF9, 0x00, 0x01, 0x05, 0x00, 0x01, 0x11, 0x00, 0x01, 0x1D, 0x00, 0x01, 0x29,
//		0x00, 0x01, 0x35, 0x00, 0x01, 0x41, 0x00, 0x01, 0x4D, 0x00, 0x01, 0x59, 0x00, 0x01, 0x64, 0x00, 0x01, 0x70, 0x00, 0x01, 0x7C, 0x00, 0x01, 0x87, 0x00, 0x01,
//		0x93, 0x00, 0x01, 0x9E, 0x00, 0x01, 0xAA, 0x00, 0x01, 0xB5, 0x00, 0x01, 0xC0, 0x00, 0x01, 0xCC, 0x00, 0x01, 0xD7, 0x00, 0x01, 0xE2, 0x00, 0x01, 0xED, 0x00,
//		0x01, 0xF8, 0x00, 0x02, 0x02, 0x00, 0x02, 0x0D, 0x00, 0x02, 0x18, 0x00, 0x02, 0x22, 0x00, 0x02, 0x2D, 0x00, 0x02, 0x37, 0x00, 0x02, 0x42, 0x00, 0x02, 0x4C,
//		0x00, 0x02, 0x56, 0x00, 0x02, 0x60, 0x00, 0x02, 0x6A, 0x00, 0x02, 0x74, 0x00, 0x02, 0x7D, 0x00, 0x02, 0x87, 0x00, 0x02, 0x91, 0x00, 0x02, 0x9A, 0x00, 0x02,
//		0xA3, 0x00, 0x02, 0xAD, 0x00, 0x02, 0xB6, 0x00, 0x02, 0xBF, 0x00, 0x02, 0xC8, 0x00, 0x02, 0xD0, 0x00, 0x02, 0xD9, 0x00, 0x02, 0xE2, 0x00, 0x02, 0xEA, 0x00,
//		0x02, 0xF2, 0x00, 0x02, 0xFA, 0x00, 0x03, 0x03, 0x00, 0x03, 0x0A, 0x00, 0x03, 0x12, 0x00, 0x03, 0x1A, 0x00, 0x03, 0x22, 0x00, 0x03, 0x29, 0x00, 0x03, 0x30,
//		0x00, 0x03, 0x38, 0x00, 0x03, 0x3F, 0x00, 0x03, 0x46, 0x00, 0x03, 0x4C, 0x00, 0x03, 0x53, 0x00, 0x03, 0x5A, 0x00, 0x03, 0x60, 0x00, 0x03, 0x66, 0x00, 0x03,
//		0x6C, 0x00, 0x03, 0x72, 0x00, 0x03, 0x78, 0x00, 0x03, 0x7E, 0x00, 0x03, 0x83, 0x00, 0x03, 0x89, 0x00, 0x03, 0x8E, 0x00, 0x03, 0x93, 0x00, 0x03, 0x98, 0x00,
//		0x03, 0x9D, 0x00, 0x03, 0xA2, 0x00, 0x03, 0xA6, 0x00, 0x03, 0xAB, 0x00, 0x03, 0xAF, 0x00, 0x03, 0xB3, 0x00, 0x03, 0xB7, 0x00, 0x03, 0xBB, 0x00, 0x03, 0xBF,
//		0x00, 0x03, 0xC2, 0x00, 0x03, 0xC5, 0x00, 0x03, 0xC9, 0x00, 0x03, 0xCC, 0x00, 0x03, 0xCF, 0x00, 0x03, 0xD1, 0x00, 0x03, 0xD4, 0x00, 0x03, 0xD6, 0x00, 0x03,
//		0xD9, 0x00, 0x03, 0xDB, 0x00, 0x03, 0xDD, 0x00, 0x03, 0xDE, 0x00, 0x03, 0xE0, 0x00, 0x03, 0xE2, 0x00, 0x03, 0xE3, 0x00, 0x03, 0xE4, 0x00, 0x03, 0xE5, 0x00,
//		0x03, 0xE6, 0x00, 0x03, 0xE7, 0x00, 0x03, 0xE7, 0x00, 0x03, 0xE8, 0x00, 0x03, 0xE8, 0x00, 0x03, 0xE8, 0x00, 0x03, 0xE8, 0x00, 0x03, 0xE8, 0x00, 0x03, 0xE7,
//		0x00, 0x03, 0xE7, 0x00, 0x03, 0xE6, 0x00, 0x03, 0xE5, 0x00, 0x03, 0xE4, 0x00, 0x03, 0xE3, 0x00, 0x03, 0xE2, 0x00, 0x03, 0xE0, 0x00, 0x03, 0xDE, 0x00, 0x03,
//		0xDD, 0x00, 0x03, 0xDB, 0x00, 0x03, 0xD9, 0x00, 0x03, 0xD6, 0x00, 0x03, 0xD4, 0x00, 0x03, 0xD1, 0x00, 0x03, 0xCF, 0x00, 0x03, 0xCC, 0x00, 0x03, 0xC9, 0x00,
//		0x03, 0xC5, 0x00, 0x03, 0xC2, 0x00, 0x03, 0xBF, 0x00, 0x03, 0xBB, 0x00, 0x03, 0xB7, 0x00, 0x03, 0xB3, 0x00, 0x03, 0xAF, 0x00, 0x03, 0xAB, 0x00, 0x03, 0xA6,
//		0x00, 0x03, 0xA2, 0x00, 0x03, 0x9D, 0x00, 0x03, 0x98, 0x00, 0x03, 0x93, 0x00, 0x03, 0x8E, 0x00, 0x03, 0x89, 0x00, 0x03, 0x83, 0x00, 0x03, 0x7E, 0x00, 0x03,
//		0x78, 0x00, 0x03, 0x72, 0x00, 0x03, 0x6C, 0x00, 0x03, 0x66, 0x00, 0x03, 0x60, 0x00, 0x03, 0x5A, 0x00, 0x03, 0x53, 0x00, 0x03, 0x4C, 0x00, 0x03, 0x46, 0x00,
//		0x03, 0x3F, 0x00, 0x03, 0x38, 0x00, 0x03, 0x30, 0x00, 0x03, 0x29, 0x00, 0x03, 0x22, 0x00, 0x03, 0x1A, 0x00, 0x03, 0x12, 0x00, 0x03, 0x0A, 0x00, 0x03, 0x03,
//		0x00, 0x02, 0xFA, 0x00, 0x02, 0xF2, 0x00, 0x02, 0xEA, 0x00, 0x02, 0xE2, 0x00, 0x02, 0xD9, 0x00, 0x02, 0xD0, 0x00, 0x02, 0xC8, 0x00, 0x02, 0xBF, 0x00, 0x02,
//		0xB6, 0x00, 0x02, 0xAD, 0x00, 0x02, 0xA3, 0x00, 0x02, 0x9A, 0x00, 0x02, 0x91, 0x00, 0x02, 0x87, 0x00, 0x02, 0x7D, 0x00, 0x02, 0x74, 0x00, 0x02, 0x6A, 0x00,
//		0x02, 0x60, 0x00, 0x02, 0x56, 0x00, 0x02, 0x4C, 0x00, 0x02, 0x42, 0x00, 0x02, 0x37, 0x00, 0x02, 0x2D, 0x00, 0x02, 0x22, 0x00, 0x02, 0x18, 0x00, 0x02, 0x0D,
//		0x00, 0x02, 0x02, 0x00, 0x01, 0xF8, 0x00, 0x01, 0xED, 0x00, 0x01, 0xE2, 0x00, 0x01, 0xD7, 0x00, 0x01, 0xCC, 0x00, 0x01, 0xC0, 0x00, 0x01, 0xB5, 0x00, 0x01,
//		0xAA, 0x00, 0x01, 0x9E, 0x00, 0x01, 0x93, 0x00, 0x01, 0x87, 0x00, 0x01, 0x7C, 0x00, 0x01, 0x70, 0x00, 0x01, 0x64, 0x00, 0x01, 0x59, 0x00, 0x01, 0x4D, 0x00,
//		0x01, 0x41, 0x00, 0x01, 0x35, 0x00, 0x01, 0x29, 0x00, 0x01, 0x1D, 0x00, 0x01, 0x11, 0x00, 0x01, 0x05, 0x00, 0x00, 0xF9, 0x00, 0x00, 0xEC, 0x00, 0x00, 0xE0,
//		0x00, 0x00, 0xD4, 0x00, 0x00, 0xC8, 0x00, 0x00, 0xBB, 0x00, 0x00, 0xAF, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x96, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x7D, 0x00, 0x00,
//		0x71, 0x00, 0x00, 0x64, 0x00, 0x00, 0x58, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x32, 0x00, 0x00, 0x26, 0x00, 0x00, 0x19, 0x00, 0x00, 0x0D, 0x00,
//		0x00, 0x00, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xDA, 0xFF, 0xFF, 0xCE, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xB5, 0xFF, 0xFF, 0xA8, 0xFF, 0xFF, 0x9C,
//		0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0x76, 0xFF, 0xFF, 0x6A, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0x51, 0xFF, 0xFF, 0x45, 0xFF, 0xFF, 0x38, 0xFF, 0xFF,
//		0x2C, 0xFF, 0xFF, 0x20, 0xFF, 0xFF, 0x14, 0xFF, 0xFF, 0x07, 0xFF, 0xFE, 0xFB, 0xFF, 0xFE, 0xEF, 0xFF, 0xFE, 0xE3, 0xFF, 0xFE, 0xD7, 0xFF, 0xFE, 0xCB, 0xFF,
//		0xFE, 0xBF, 0xFF, 0xFE, 0xB3, 0xFF, 0xFE, 0xA7, 0xFF, 0xFE, 0x9C, 0xFF, 0xFE, 0x90, 0xFF, 0xFE, 0x84, 0xFF, 0xFE, 0x79, 0xFF, 0xFE, 0x6D, 0xFF, 0xFE, 0x62,
//		0xFF, 0xFE, 0x56, 0xFF, 0xFE, 0x4B, 0xFF, 0xFE, 0x40, 0xFF, 0xFE, 0x34, 0xFF, 0xFE, 0x29, 0xFF, 0xFE, 0x1E, 0xFF, 0xFE, 0x13, 0xFF, 0xFE, 0x08, 0xFF, 0xFD,
//		0xFE, 0xFF, 0xFD, 0xF3, 0xFF, 0xFD, 0xE8, 0xFF, 0xFD, 0xDE, 0xFF, 0xFD, 0xD3, 0xFF, 0xFD, 0xC9, 0xFF, 0xFD, 0xBE, 0xFF, 0xFD, 0xB4, 0xFF, 0xFD, 0xAA, 0xFF,
//		0xFD, 0xA0, 0xFF, 0xFD, 0x96, 0xFF, 0xFD, 0x8C, 0xFF, 0xFD, 0x83, 0xFF, 0xFD, 0x79, 0xFF, 0xFD, 0x6F, 0xFF, 0xFD, 0x66, 0xFF, 0xFD, 0x5D, 0xFF, 0xFD, 0x53,
//		0xFF, 0xFD, 0x4A, 0xFF, 0xFD, 0x41, 0xFF, 0xFD, 0x38, 0xFF, 0xFD, 0x30, 0xFF, 0xFD, 0x27, 0xFF, 0xFD, 0x1E, 0xFF, 0xFD, 0x16, 0xFF, 0xFD, 0x0E, 0xFF, 0xFD,
//		0x06, 0xFF, 0xFC, 0xFD, 0xFF, 0xFC, 0xF6, 0xFF, 0xFC, 0xEE, 0xFF, 0xFC, 0xE6, 0xFF, 0xFC, 0xDE, 0xFF, 0xFC, 0xD7, 0xFF, 0xFC, 0xD0, 0xFF, 0xFC, 0xC8, 0xFF,
//		0xFC, 0xC1, 0xFF, 0xFC, 0xBA, 0xFF, 0xFC, 0xB4, 0xFF, 0xFC, 0xAD, 0xFF, 0xFC, 0xA6, 0xFF, 0xFC, 0xA0, 0xFF, 0xFC, 0x9A, 0xFF, 0xFC, 0x94, 0xFF, 0xFC, 0x8E,
//		0xFF, 0xFC, 0x88, 0xFF, 0xFC, 0x82, 0xFF, 0xFC, 0x7D, 0xFF, 0xFC, 0x77, 0xFF, 0xFC, 0x72, 0xFF, 0xFC, 0x6D, 0xFF, 0xFC, 0x68, 0xFF, 0xFC, 0x63, 0xFF, 0xFC,
//		0x5E, 0xFF, 0xFC, 0x5A, 0xFF, 0xFC, 0x55, 0xFF, 0xFC, 0x51, 0xFF, 0xFC, 0x4D, 0xFF, 0xFC, 0x49, 0xFF, 0xFC, 0x45, 0xFF, 0xFC, 0x41, 0xFF, 0xFC, 0x3E, 0xFF,
//		0xFC, 0x3B, 0xFF, 0xFC, 0x37, 0xFF, 0xFC, 0x34, 0xFF, 0xFC, 0x31, 0xFF, 0xFC, 0x2F, 0xFF, 0xFC, 0x2C, 0xFF, 0xFC, 0x2A, 0xFF, 0xFC, 0x27, 0xFF, 0xFC, 0x25,
//		0xFF, 0xFC, 0x23, 0xFF, 0xFC, 0x22, 0xFF, 0xFC, 0x20, 0xFF, 0xFC, 0x1E, 0xFF, 0xFC, 0x1D, 0xFF, 0xFC, 0x1C, 0xFF, 0xFC, 0x1B, 0xFF, 0xFC, 0x1A, 0xFF, 0xFC,
//		0x19, 0xFF, 0xFC, 0x19, 0xFF, 0xFC, 0x18, 0xFF, 0xFC, 0x18, 0xFF, 0xFC, 0x18, 0xFF, 0xFC, 0x18, 0xFF, 0xFC, 0x18, 0xFF, 0xFC, 0x19, 0xFF, 0xFC, 0x19, 0xFF,
//		0xFC, 0x1A, 0xFF, 0xFC, 0x1B, 0xFF, 0xFC, 0x1C, 0xFF, 0xFC, 0x1D, 0xFF, 0xFC, 0x1E, 0xFF, 0xFC, 0x20, 0xFF, 0xFC, 0x22, 0xFF, 0xFC, 0x23, 0xFF, 0xFC, 0x25,
//		0xFF, 0xFC, 0x27, 0xFF, 0xFC, 0x2A, 0xFF, 0xFC, 0x2C, 0xFF, 0xFC, 0x2F, 0xFF, 0xFC, 0x31, 0xFF, 0xFC, 0x34, 0xFF, 0xFC, 0x37, 0xFF, 0xFC, 0x3B, 0xFF, 0xFC,
//		0x3E, 0xFF, 0xFC, 0x41, 0xFF, 0xFC, 0x45, 0xFF, 0xFC, 0x49, 0xFF, 0xFC, 0x4D, 0xFF, 0xFC, 0x51, 0xFF, 0xFC, 0x55, 0xFF, 0xFC, 0x5A, 0xFF, 0xFC, 0x5E, 0xFF,
//		0xFC, 0x63, 0xFF, 0xFC, 0x68, 0xFF, 0xFC, 0x6D, 0xFF, 0xFC, 0x72, 0xFF, 0xFC, 0x77, 0xFF, 0xFC, 0x7D, 0xFF, 0xFC, 0x82, 0xFF, 0xFC, 0x88, 0xFF, 0xFC, 0x8E,
//		0xFF, 0xFC, 0x94, 0xFF, 0xFC, 0x9A, 0xFF, 0xFC, 0xA0, 0xFF, 0xFC, 0xA6, 0xFF, 0xFC, 0xAD, 0xFF, 0xFC, 0xB4, 0xFF, 0xFC, 0xBA, 0xFF, 0xFC, 0xC1, 0xFF, 0xFC,
//		0xC8, 0xFF, 0xFC, 0xD0, 0xFF, 0xFC, 0xD7, 0xFF, 0xFC, 0xDE, 0xFF, 0xFC, 0xE6, 0xFF, 0xFC, 0xEE, 0xFF, 0xFC, 0xF6, 0xFF, 0xFC, 0xFD, 0xFF, 0xFD, 0x06, 0xFF,
//		0xFD, 0x0E, 0xFF, 0xFD, 0x16, 0xFF, 0xFD, 0x1E, 0xFF, 0xFD, 0x27, 0xFF, 0xFD, 0x30, 0xFF, 0xFD, 0x38, 0xFF, 0xFD, 0x41, 0xFF, 0xFD, 0x4A, 0xFF, 0xFD, 0x53,
//		0xFF, 0xFD, 0x5D, 0xFF, 0xFD, 0x66, 0xFF, 0xFD, 0x6F, 0xFF, 0xFD, 0x79, 0xFF, 0xFD, 0x83, 0xFF, 0xFD, 0x8C, 0xFF, 0xFD, 0x96, 0xFF, 0xFD, 0xA0, 0xFF, 0xFD,
//		0xAA, 0xFF, 0xFD, 0xB4, 0xFF, 0xFD, 0xBE, 0xFF, 0xFD, 0xC9, 0xFF, 0xFD, 0xD3, 0xFF, 0xFD, 0xDE, 0xFF, 0xFD, 0xE8, 0xFF, 0xFD, 0xF3, 0xFF, 0xFD, 0xFE, 0xFF,
//		0xFE, 0x08, 0xFF, 0xFE, 0x13, 0xFF, 0xFE, 0x1E, 0xFF, 0xFE, 0x29, 0xFF, 0xFE, 0x34, 0xFF, 0xFE, 0x40, 0xFF, 0xFE, 0x4B, 0xFF, 0xFE, 0x56, 0xFF, 0xFE, 0x62,
//		0xFF, 0xFE, 0x6D, 0xFF, 0xFE, 0x79, 0xFF, 0xFE, 0x84, 0xFF, 0xFE, 0x90, 0xFF, 0xFE, 0x9C, 0xFF, 0xFE, 0xA7, 0xFF, 0xFE, 0xB3, 0xFF, 0xFE, 0xBF, 0xFF, 0xFE,
//		0xCB, 0xFF, 0xFE, 0xD7, 0xFF, 0xFE, 0xE3, 0xFF, 0xFE, 0xEF, 0xFF, 0xFE, 0xFB, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0x14, 0xFF, 0xFF, 0x20, 0xFF, 0xFF, 0x2C, 0xFF,
//		0xFF, 0x38, 0xFF, 0xFF, 0x45, 0xFF, 0xFF, 0x51, 0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0x6A, 0xFF, 0xFF, 0x76, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0x9C,
//		0xFF, 0xFF, 0xA8, 0xFF, 0xFF, 0xB5, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xCE, 0xFF, 0xFF, 0xDA, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xF3 };



//uint8_t afe_serial_send(uint8_t data)
//{
//	__delay_cycles(120);                    //Wait 7.5us (assuming 24MHz MCLK), required to allow t_sdecode to be 4 T_clk
//
//	UCB1RXBUF;								//Dummy read to empty RX buffer
//											//and clear any overrun conditions
//
//	while (!(UCB1IFG & UCTXIFG));           //Wait while not ready for TX
//	UCB1TXBUF = data;						//Transmit byte (automatically clears UCTXIFG)
//
//	while(UCB1STATW & UCBUSY);
//	while (!(UCB1IFG & UCRXIFG));
//
//    return UCB1RXBUF;				//Return received data if any
//}

uint8_t afe_serial_send(uint8_t data)
{

	static int i = 0;

	__delay_cycles(120);                    //Wait 7.5us (assuming 24MHz MCLK), required to allow t_sdecode to be 4 T_clk

	UCB1RXBUF;								//Dummy read to empty RX buffer
											//and clear any overrun conditions

	while (!(UCB1IFG & UCTXIFG));           //Wait while not ready for TX
	UCB1TXBUF = data;						//Transmit byte (automatically clears UCTXIFG)

	while(UCB1STATW & UCBUSY);
	while (!(UCB1IFG & UCRXIFG));

//    return sin[i++];
	return UCB1RXBUF;				//Return received data if any
}

void afe_serial_write_register(uint8_t address, uint8_t value)
{
	__delay_cycles(96);                     //Wait 6us (assuming 24MHz MCLK), required to allow t_sdecode to be 4 T_clk
											//needed to ensure previous byte was not sent within this time period

	while (!(UCB1IFG & UCTXIFG));          //Wait while not ready for TX
	UCB1TXBUF = address | WREG;
	__delay_cycles(120);                    //Wait 7.5us (assuming 24MHz MCLK), required to allow t_sdecode to be 4 T_clk

	while (!(UCB1IFG & UCTXIFG));           //Wait while not ready for TX
	UCB1TXBUF = 0x00;						// Default size = 1
	__delay_cycles(120);                   	//Wait 7.5us (assuming 24MHz MCLK), required to allow t_sdecode to be 4 T_clk

	while (!(UCB1IFG & UCTXIFG));          	//Wait while not ready for TX
	UCB1TXBUF = value;

	while ((UCB1STAT & UCBUSY));            //Wait for all TX/RX to finish

	UCB1RXBUF;                            	//Dummy read to empty RX buffer
											//and clear any overrun conditions
}

// NOT USED
uint8_t afe_serial_read_register(uint8_t address)
{
	__delay_cycles(96);

	while (!(UCB1IFG & UCTXIFG)) ;      //Wait while not ready for TX
	UCB1TXBUF = address | RREG;
	__delay_cycles(120);               	//Wait 7.5us (assuming 24MHz MCLK), required to allow t_sdecode to be 4 T_clk
										//this value was determined experimentally
	while (!(UCB1IFG & UCTXIFG));       //Wait while not ready for TX
	UCB1TXBUF = 0x00;					// Default size = 1
	while ((UCB1STAT & UCBUSY));        //Wait for all TX/RX to finish

	UCB1RXBUF;                          //Dummy read to empty RX buffer
											//and clear any overrun conditions
	UCB1IFG &= ~UCRXIFG;                //Ensure RXIFG is clear

	// Clock the actual data transfer and receive the bytes

	__delay_cycles(120);                //Wait 7.5us (assuming 24MHz MCLK), required to allow t_sdecode to be 4 T_clk

	while (!(UCB1IFG & UCTXIFG));   	//Wait while not ready for TX
	UCB1TXBUF = 0xff;					//Write dummy byte
	while (!(UCB1IFG & UCRXIFG));       //Wait for RX buffer (full)

	return UCB1RXBUF;
}
